{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SCAAC,EAAAD,EAAA,SAEO,SAASE,EAAaC,GAC3B,MAAMC,EAASD,EACZE,KACC,EAACC,aACCA,EAAYC,cACZA,EAAaC,KACbA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,KAEO,wCACsBL,kEAEbD,WAAsBE,2HAGfC,4FAGAC,+FAGGC,gGAGCC,wFAQ9BC,KAAK,IAERZ,EAAAa,KAAKC,QAAQC,mBAAmB,YAAaZ,E,+BD/B/CH,EAAAa,KAAKG,KAAKC,iBAAiB,UAmE3B,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAaF,EAAMG,OAAOC,SAASC,YAAYC,MAErD,IAAKJ,EAAWK,QAAUL,IAAeM,EACvC,OAAOC,EAAAC,OAAOC,QAAQ,oCAExBH,EAAcN,EACdU,EAAa,EAEb9B,EAAAa,KAAKC,QAAQiB,UAAY,GAEzBC,EAAUN,EAAaI,GAEvB9B,EAAAa,KAAKG,KAAKiB,O,IAhFZ,IACIH,EADAJ,EAAc,GAQlB,MAAMQ,EAAW,IAAIC,sBACnBC,IACEA,EAAQC,SAAQC,IACVA,EAAMC,iBACRC,QAAQC,IAAIH,GACZN,EAAUN,EAAaI,G,GAEzB,GAEJ,CACEY,KAAM,KACNC,WAAY,QACZC,UAAW,IAIfC,eAAeb,EAAUc,EAAGC,GAC1B,IACE,MAAMC,QAAa,EAAAlD,EAAAmD,kBAAiBH,EAAGC,GAIvC,GAHAP,QAAQC,IAAIO,EAAKE,MACjBV,QAAQC,IAAIO,IAEPA,EAAKG,UAIR,YAHAxB,EAAAC,OAAOwB,QACL,4EAKJnD,EAAa+C,EAAKE,MAEC,IAAfpB,GACFH,EAAAC,OAAOyB,QAAQ,oBAAoBL,EAAKG,qBAG1C,MAAMG,EAAWC,KAAKC,KAAKR,EAAKG,UAAY,IAE5C,GAAIrB,IAAewB,EAMf,OAJApB,EAASuB,UAAUzD,EAAAa,KAAK6C,YACxB/B,EAAAC,OAAO+B,KACL,8DAMN7B,GAAc,EACdI,EAAS0B,QAAQ5D,EAAAa,KAAK6C,M,CAGtB,MAAOG,GACPrB,QAAQC,IAAIoB,GACZlC,EAAAC,OAAOwB,QAAQ,oD","sources":["src/js/02-scroll.js","src/js/02-markup.js"],"sourcesContent":["import { fetchPixabayData } from './pixabay-api';\nimport { createMarkup } from './02-markup';\nimport { refs } from './refs';\n\nimport { Notify } from 'notiflix';\n// import SimpleLightbox from 'simplelightbox';\n// import 'simplelightbox/dist/simple-lightbox.min.css';\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nlet searchQuery = '';\nlet searchPage;\n\n// lightbox = new SimpleLightbox('.gallery a', {\n//   overlayOpacity: 0.5,\n//   captionDelay: 250,\n// });\n\nconst observer = new IntersectionObserver(\n  entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        console.log(entry);\n        getImages(searchQuery, searchPage);\n      }\n    });\n  },\n  {\n    root: null,\n    rootMargin: '100px',\n    threshold: 1.0,\n  }\n);\n\nasync function getImages(q, pages) {\n  try {\n    const data = await fetchPixabayData(q, pages);\n    console.log(data.hits);\n    console.log(data);\n\n    if (!data.totalHits) {\n      Notify.failure(\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      return;\n    }\n\n    createMarkup(data.hits);\n\n    if (searchPage === 1) {\n      Notify.success(`Hooray! We found ${data.totalHits} images.`);\n    }\n\n    const lastPage = Math.ceil(data.totalHits / 40);\n\n    if (searchPage === lastPage) {\n      {\n        observer.unobserve(refs.guard);\n        Notify.info(\n          `We're sorry, but you've reached the end of search results.`\n        );\n        return;\n      }\n    }\n\n    searchPage += 1;\n    observer.observe(refs.guard);\n\n    // lightbox.refresh();\n  } catch (error) {\n    console.log(error);\n    Notify.failure(`Ooops... Something goes wrong. Please, try again.`);\n  }\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const inputValue = event.target.elements.searchQuery.value;\n\n  if (!inputValue.trim() || inputValue === searchQuery)\n    return Notify.warning('Please enter something to search');\n\n  searchQuery = inputValue;\n  searchPage = 1;\n\n  refs.gallery.innerHTML = '';\n\n  getImages(searchQuery, searchPage);\n\n  refs.form.reset();\n}\n","import { refs } from './refs';\n\nexport function createMarkup(array) {\n  const markup = array\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `\n        <a class=\"link-card\" href=\"${largeImageURL}\">\n          <div class=\"photo-card\">\n            <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n            <div class=\"info\">\n              <p class=\"info-item\">\n                <b>Likes</b> ${likes}\n              </p>\n              <p class=\"info-item\">\n                <b>Views</b> ${views}\n              </p>\n              <p class=\"info-item\">\n                <b>Comments</b> ${comments}\n              </p>\n              <p class=\"info-item\">\n                <b>Downloads</b> ${downloads}\n              </p>\n            </div>\n          </div>\n        </a>\n        `;\n      }\n    )\n    .join('');\n\n  refs.gallery.insertAdjacentHTML('beforeend', markup);\n}\n"],"names":["$6fOXY","parcelRequire","$krGWQ","$b0343de86df5a76f$export$24783e9f3a24abe4","array","markup","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","join","refs","gallery","insertAdjacentHTML","form","addEventListener","event","preventDefault","inputValue","target","elements","searchQuery","value","trim","$0943ba9843123748$var$searchQuery","$7Y9D8","Notify","warning","$0943ba9843123748$var$searchPage","innerHTML","$0943ba9843123748$var$getImages","reset","$0943ba9843123748$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","console","log","root","rootMargin","threshold","async","q","pages","data","fetchPixabayData","hits","totalHits","failure","success","lastPage","Math","ceil","unobserve","guard","info","observe","error"],"version":3,"file":"02-scroll.afca586c.js.map"}